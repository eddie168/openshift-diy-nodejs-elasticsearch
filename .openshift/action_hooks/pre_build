#!/bin/bash
# This is a simple script and will be executed on your CI system if 
# available.  Otherwise it will execute while your application is stopped
# before the build step.  This script gets executed directly, so it
# could be python, php, ruby, etc.

cd ${OPENSHIFT_REPO_DIR}
NODE_VERSION=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.nodejs.version)'`
NODE_REMOVE_OLD=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.nodejs.removeOld)'`

ES_VERSION=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.elasticsearch.version)'`
ES_PORT=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.elasticsearch.port)'`
ES_HEAP_SIZE=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.elasticsearch.ES_HEAP_SIZE)'`
ES_REMOVE_OLD=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.elasticsearch.removeOld)'`

# Prepare Node.js
if [ ! -e ${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}/bin/node ]; then
  # Delete previous version
  if [ $NODE_REMOVE_OLD == "true" ]; then
    echo "rm -rf ${OPENSHIFT_DATA_DIR}node-*"
    rm -rf ${OPENSHIFT_DATA_DIR}node-*
  fi
  cd ${OPENSHIFT_TMP_DIR}
  # Determine hardware type for pre-compiled linux binary
  if [ "`uname -i`" == "x86_64" ]; then
    TYPE="x64"
  else
    TYPE="x86"
  fi
  BINARY="http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-$TYPE.tar.gz"
  # Check pre-compiled linux binary
  if [ "`curl -Is $BINARY | grep '200 OK'`" != '' ]; then
    curl -L -o node-${NODE_VERSION}-linux-${TYPE}.tar.gz $BINARY
    tar -xvzf node-${NODE_VERSION}-linux-${TYPE}.tar.gz
    mv node-${NODE_VERSION}-linux-${TYPE} ${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}
    rm -f node-${NODE_VERSION}-linux-${TYPE}.tar.gz
  else
    # Don't have pre-compiled binary, compile from source. Determine tarball url
    tarball=''
    if [ "`curl -Is "http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION.tar.gz" | grep '200 OK'`" != '' ]; then
      tarball="http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION.tar.gz"
    elif [ "`curl -Is "http://nodejs.org/dist/node-$NODE_VERSION.tar.gz" | grep '200 OK'`" != '' ]; then
      tarball="http://nodejs.org/dist/node-$NODE_VERSION.tar.gz"
    fi
    # Check is tarball already download and extracted
    if [ ! -d node-${NODE_VERSION} ]; then
      curl -L -o node-${NODE_VERSION}.tar.gz $tarball
      tar -xvzf node-${NODE_VERSION}.tar.gz
    fi
    cd node-${NODE_VERSION}
    echo "Start compiling Node ${NODE_VERSION} on Openshift (it'll take a while)"
    ./configure --prefix="${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}" && make && make install
    # Assume it works, delete the tarball and source codes
    # because files in /tmp still counted into the disk quota
    cd ${OPENSHIFT_TMP_DIR}
    rm -f node-${NODE_VERSION}.tar.gz
    rm -rf node-${NODE_VERSION}/
  fi
fi

# Prepare ElasticSearch
if [ ! -e ${OPENSHIFT_DATA_DIR}elasticsearch-${ES_VERSION}/bin/elasticsearch ]; then
  # Delete previous version
  if [ $ES_REMOVE_OLD == "true" ]; then
    echo "rm -rf ${OPENSHIFT_DATA_DIR}elasticsearch-*"
    rm -rf ${OPENSHIFT_DATA_DIR}elasticsearch-*
  fi
  cd ${OPENSHIFT_DATA_DIR}
  tarball=''
  if [ "`curl -Is "http://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-${ES_VERSION}.tar.gz" | grep '200 OK\|302 Found'`" != '' ]; then
    tarball="http://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-${ES_VERSION}.tar.gz"
  else
    tarball="http://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.20.2.tar.gz"
    ES_VERSION="0.20.2"
    echo "#### ${ES_VERSION} not exist. Change elasticsearch.verion changed to *0.20.2*"
  fi
  # Download the tarball
  if [ ! -d elasticsearch-${ES_VERSION} ]; then
    curl -L -o elasticsearch-${ES_VERSION}.tar.gz $tarball
    tar -xvzf elasticsearch-${ES_VERSION}.tar.gz
  fi
  rm -f elasticsearch-${ES_VERSION}.tar.gz
  cd elasticsearch-${ES_VERSION}
  cp -f config/elasticsearch.yml config/elasticsearch.yml.orig
fi
# Create elasticsearch.yml
cp -f ${OPENSHIFT_DATA_DIR}elasticsearch-${ES_VERSION}/config/elasticsearch.yml.orig ${OPENSHIFT_DATA_DIR}elasticsearch-${ES_VERSION}/config/elasticsearch.yml
# Add settings
(echo "path.logs: \${OPENSHIFT_DIY_LOG_DIR}"
echo "network.host: \${OPENSHIFT_INTERNAL_IP}"
echo "transport.tcp.port: 3306"
echo "http.port: ${ES_PORT}"
echo "discovery.zen.ping.multicast.enabled: false"
echo "discovery.zen.ping.unicast.hosts: []") >> ${OPENSHIFT_DATA_DIR}elasticsearch-${ES_VERSION}/config/elasticsearch.yml

# Create environment variables for this version
cat <<EOF > ${OPENSHIFT_DATA_DIR}diy_env.sh
export NODE_VERSION=${NODE_VERSION}
export ES_VERSION=${ES_VERSION}
export ES_PORT=${ES_PORT}
export ES_HEAP_SIZE=${ES_HEAP_SIZE}
export TMPDIR=\${OPENSHIFT_TMP_DIR}
if [ -z \$NODE_DEFINED ]; then
  export NODE_DEFINED=1
  export PATH="\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/bin:\$PATH"
  export npm_config_cache=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npm
  export npm_config_userconfig=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npmrc
  export npm_config_userignorefile=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npmignore
  export npm_config_tmp=\${OPENSHIFT_TMP_DIR}
  export NODE_ENV=production
fi
EOF
chmod +x ${OPENSHIFT_DATA_DIR}diy_env.sh

